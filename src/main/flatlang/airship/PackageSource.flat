package flatlang/airship

import flatlang/datastruct/HashMap

class {
  visible Dependency[] localDependencies => dependencies.filter({ _.class.isOfType(LocalDependency.class) })

  public construct(
    visible String mainClass,
    visible String outDirectory,
    visible String outFile,
    visible String source,
    visible String[] defaultExports,
    visible Dependency[] dependencies
  ) {}

  public construct(HashMap<String, Object> map) {
    let exportsValue = (Object)(map["defaultExports"])
    let defaultExports = (Array)exportsValue
    let dependenciesValue = (Object)(map["dependencies"])
    let dependenciesMap = (HashMap)dependenciesValue
    let dependencies = dependenciesMap.map(pair => Dependency((String)pair.key, (String)pair.value))
    this(
      mainClass: (String)map["mainClass"],
      outDirectory: (String)map["outDirectory"],
      outFile: (String)map["outFile"],
      source: (String)map["source"],
      defaultExports: defaultExports ?: Array<String>(),
      dependencies: dependencies ?: Array<Dependency>()
    )
  }

  override public toString() => "{
      mainClass: \"#mainClass\",
      outDirectory: \"#outDirectory\",
      outFile: \"#outFile\",
      source: \"#source\",
      defaultExports: \"#defaultExports\",
      dependencies: \"#dependencies\"
    }
    |"

  public clone(
    String mainClass = mainClass,
    String outDirectory = outDirectory,
    String outFile = outFile,
    String source = source,
    String[] defaultExports = defaultExports,
    Dependency[] dependencies = dependencies
  ) => PackageSource(
    mainClass,
    outDirectory,
    outFile,
    source,
    defaultExports,
    dependencies
  )
}