package "flatlang/airship/services"

import "flat/log/Logger"

import "flatlang/io/File"
import "flatlang/git/Git"
import "flatlang/airship/Airship"
import "flatlang/airship/PackageSource"
import "flatlang/airship/InvalidCommandException"
import "flatlang/airship/InvalidFlatJsonException"
import "flatlang/airship/ExecutionFailureException"

class {
  let static Logger log = new Logger(InstallService.class)
  
  public construct(
    private Airship airship,
    private DependencyService dependencyService
  ) {}

  public async install() {
    if (airship.installCommand.values.isEmpty) {
      if (airship.linkArg.enabled) {
        if (let gitUrl = airship.getGitOriginUrl()) {
          airship.linkArg.value = "."
          installAndLink(gitUrl)
          return
        } else {
          throw new InvalidCommandException("#{System.workingDirectory} is not a git repository")
        }
      }
      install("main", install: true)
    } else {
      for (package in airship.installCommand.values) {
        install(package, install: true)
      }
    }
  }

  public async install(String package, Bool: install = false, Bool: installDependencies = true) {
    if (airship.linkArg.enabled) {
      installAndLink(package)
    } else if (package.endsWith(".git")) {
      installGitPackage(package, "master", install, installDependencies)
    } else {
      installLocalPackage(package)
    }
  }

  public async getInstallCommand(String package, PackageSource source) -> String[] {
    if (!source) {
      throw new InvalidCommandException("No source found for installation")
    }

    let cmd = [
      "java",
      "-jar",
      "#{airship.flatHome}/packages/Flat/target/flatc.jar",
      "#{airship.packageLocation.normalizedLocation}/#{source.source}",
      "-install-dir", "#{airship.flatHome}/packages",
      "-o", "#{airship.packageLocation.normalizedLocation}/#{source.outDirectory}/#{source.outFile}"
    ]

    if (airship.target) {
      cmd.addAll(["-target", airship.target])
    }

    let response = dependencyService.getDependenciesForSource(package, package, source)

    response.dependencies.forEach({ cmd.addAll(["-l", dependencyService.getDependencyLocation(_)]) })

    if (source.mainClass) {
      cmd.addAll(["-main", source.mainClass])
    } else {
      cmd.add("-library")
    }

    return cmd
  }

  async installLocalPackage(String package) {
    let source = airship.getSourceForPackage(package)

    if (!source) {
      throw new InvalidCommandException("No source found for installation package '#package'")
    }

    installDependencies(package, source)
    let cmd = getInstallCommand(package, source)

    if (airship.debug) {
      Console.writeLine(cmd[0] + " " + cmd.skip(1).map({ "\"#{_}\"" }).join(" "))
      return
    }

    let response = System.execute(cmd, silent: airship.quietArg.enabled)

    if (response.exitCode != 0) {
      throw new ExecutionFailureException("Compilation failed")
    }
  }

  public async installGitPackage(
    String url,
    String branch,
    Bool: build = true,
    Bool: install = true,
    Bool: installDependencies = true
  ) {
    if (dependencyService.isDependencyInstalled(url, branch)) {
      dependencyService.downloadDependency(url, branch)
    }

    postInstallPackage(
      dependencyService.getDependencyPackageLocation(url),
      build,
      install,
      installDependencies
    )
  }

  async installAndLink(String url) {
    let start = url.lastIndexOf('/') + 1
    let end = url.lastIndexOf('.')

    if (start > end) {
      throw new InvalidFlatJsonException("Invalid repo url '#url'")
    }

    let packageName = url.substring(start, end)
    let flatPackageDir = new File("#{airship.flatHome}/packages/#{packageName}")

    flatPackageDir.symbolicLinkTo(new File("#{System.workingDirectory}/#{airship.linkArg.value}"))

    postInstallPackage(flatPackageDir, install: false)
  }

  async installDependencies(String package, PackageSource source, Bool install = false) {
    let response = dependencyService.getDependenciesForSource(package, package, source)

    for (dependency in response.dependencies.filter({ _.value != "local" })) {
      installGitPackage(
        dependencyService.getDependencyGitUrl(dependency),
        dependency.value,
        build: response.dependenciesDownloaded.contains(dependency),
        install: false,
        installDependencies: false
      )
    }
  }

  async postInstallPackage(
    File flatPackageDir,
    Bool: build = true,
    Bool: install = true,
    Bool: installDependencies = true
  ) {
    let args = [
      "-f", flatPackageDir.normalizedLocation
    ]

    if (airship.target) {
      args.addAll(["-t", airship.target])
    }

    let airship = new Airship(args)

    if (build && airship.package?.scripts.containsKey("build")) {
      airship.runScriptService.runScript("build")
    }

    if (airship.package?.main) {
      if (installDependencies) {
        airship.installService.installDependencies(flatPackageDir.name, airship.package.main)
      }
      if (install) {
        airship.installService.install()
      }
    }
  }
}