package flatlang/airship/services

import flat/log/Logger

import flatlang/io/File
import flatlang/io/FileWriter
import flatlang/airship/Airship
import flatlang/airship/InvalidScriptException
import flatlang/airship/ExecutionFailureException

import static flat/readline/ReadLine

class {
  let static Logger log = Logger(InitService.class)

  public construct(private Airship airship) {}

  requireValue(String value) => value.trim().count > 0

  public async init() {
    let directory = File(System.workingDirectory)
    let flatJson = File("#{directory.location}/flat.json")

    if (flatJson.exists) {
      throw ExecutionFailureException("#{flatJson.normalizedLocation} exists already")
    }

    let name = question("Package name: ", requireValue, "Package name is required").trim().orElse("")
    let version = question("Package version (0.1.0): ").trim().orElse("0.1.0")
    let description = question("Package description: ").trim().orElse("")
    let author = question("Package author: ").trim().orElse("")
    let license = question("Package license (ISC): ").trim().orElse("ISC")
    let defaultTarget = question("Default compilation target (es6): ").trim().orElse("es6")
    let mainClass = question("Main class (e.g.: example/ClassName) [optional - press enter to skip]: ").trim().orElse(null)

    writeSources(mainClass)

    writeFlatJson(
      flatJson,
      name,
      version,
      description,
      author,
      license,
      defaultTarget,
      mainClass
    )
  }

  async writeSources(String mainClass) {
    let sourceRoot = File("src")

    if (!sourceRoot.exists) {
      sourceRoot.mkdir()
    } else if (!sourceRoot.isDirectory) {
      throw ExecutionFailureException("Invalid 'src' directory at #sourceRoot.location")
    }

    if (mainClass) {
      writeMainClassFile(mainClass)
    }
  }

  async writeMainClassFile(String mainClass) {
    let mainClassFile = File("src/#{mainClass}.flat")

    if (!mainClassFile.exists) {
      let packageDirectory = mainClassFile.getParent()

      if (!packageDirectory.exists) {
        packageDirectory.mkdirs()
      }

      let writer = FileWriter(mainClassFile)
      let packageEndLocation = mainClass.lastIndexOf("/")
      let packageLocation = packageEndLocation == -1 ?
        "" :
        "package #{mainClass.substring(0, packageEndLocation)}\n\n"

      writer:write("#{packageLocation}class {\n  public static main(String[] args) {\n    \n  }\n}").close()
    }
  }

  async writeFlatJson(
    File flatJson,
    String: name,
    String: version,
    String: description,
    String: author,
    String: license,
    String: defaultTarget,
    String: mainClass
  ) {
    let mainClassProperty = mainClass ? "\t\t\"mainClass\": \"#{mainClass}\",\n" : ""
    let testMainClassProperty = mainClass ? "\t\t\"mainClass\": \"#{mainClass}_TestSuite\",\n" : ""

    let writer = FileWriter(flatJson)

    writer:write("{\n
      \t\"name\": \"#name\",\n
      \t\"version\": \"#version\",\n
      \t\"description\": \"#description\",\n
      \t\"author\": \"#author\",\n
      \t\"license\": \"#license\",\n
      \t\"defaultTarget\": \"#defaultTarget\",\n
      \t\"scripts\": {\n
      \t\t\"test\": \"node dist/test.js\"\n
      \t},\n
      \t\"main\": {\n#mainClassProperty
      \t\t\"source\": \"src\",\n
      \t\t\"dependencies\": {\n
      \t\t}\n
      \t},\n
      \t\"test\": {\n#testMainClassProperty
      \t\t\"source\": \"src\",\n
      \t\t\"dependencies\": {\n
      \t\t\t\"github:FlatLang/Nest\": \"master\"\n
      \t\t}\n
      \t}\n
      }\n
    ").close()
  }
}