package flatlang/airship/services

import flat/log/Logger

import flatlang/io/File
import flatlang/io/FileWriter
import flatlang/airship/Airship
import flatlang/airship/InvalidScriptException
import flatlang/airship/ExecutionFailureException

import static flat/readline/ReadLine

class {
  let static Logger log = Logger(InitService.class)

  public construct(private Airship airship) {}

  requireValue(String value) => value.trim().count > 0

  public async init() {
    let directory = File(System.workingDirectory)
    let flatJson = File("#{directory.location}/flat.json")

    if (flatJson.exists) {
      throw ExecutionFailureException("#{flatJson.normalizedLocation} exists already")
    }

    let defaultName = directory.name
    let defaultVersion = "0.1.0"
    let defaultLicense = "ISC"
    let defaultDefaultTarget = "es6"

    let name = question("Package name (default: #defaultName): ")
      .trim().orElse(defaultName)
    let version = question("Package version (default: #defaultVersion): ")
      .trim().orElse(defaultVersion)
    let description = question("Package description: ")
      .trim().orElse("")
    let author = question("Package author: ")
      .trim().orElse("")
    let license = question("Package license (default: #defaultLicense): ")
      .trim().orElse(defaultLicense)
    let defaultTarget = question("Default compilation target (default: #defaultDefaultTarget): ")
      .trim().orElse(defaultDefaultTarget)
    let mainClass = question("Main class (e.g.: example/ClassName) [optional - press enter to skip]: ")
      .trim().orElse(null)

    writeSources(mainClass)

    writeFlatJson(
      flatJson,
      name,
      version,
      description,
      author,
      license,
      defaultTarget,
      mainClass
    )
  }

  async writeSources(String mainClass) {
    let sourceRoot = File("src")

    if (!sourceRoot.exists) {
      sourceRoot.mkdir()
    } else if (!sourceRoot.isDirectory) {
      throw ExecutionFailureException("Invalid 'src' directory at #sourceRoot.location")
    }

    if (mainClass) {
      writeMainClassFile(mainClass)
      writeTestFiles(mainClass)
    }
  }

  async writeMainClassFile(String mainClass) {
    let mainClassFile = File("src/#{mainClass}.flat")

    if (!mainClassFile.exists) {
      let packageDirectory = mainClassFile.getParent()

      if (!packageDirectory.exists) {
        packageDirectory.mkdirs()
      }

      let packageEndLocation = mainClass.lastIndexOf("/")
      let packageLocation = packageEndLocation == -1 ? "" : mainClass.substring(0, packageEndLocation)
      let packageStatement = packageLocation ? "package #packageLocation" : ""

      let mainClassFileContents = "
        #{packageStatement}

        class {
          public static main(String[] args) {

          }
        }\n
        |".trimStart()

      FileWriter(mainClassFile)
        :write(mainClassFileContents)
        .close()
    }
  }

  async writeTestFiles(String mainClass) {
    let mainClassFile = File(mainClass)
    let mainClassTestFile = File("src/#{mainClass}_Test.flat")
    let testSuiteFile = File("src/#{mainClass}_TestSuite.flat")
    let packageDirectory = testSuiteFile.getParent()
    let packageEndLocation = mainClass.lastIndexOf("/")
    let packageLocation = packageEndLocation == -1 ? "" : mainClass.substring(0, packageEndLocation)
    let packageStatement = packageLocation ? "package #packageLocation" : ""

    if (!packageDirectory.exists) {
      packageDirectory.mkdirs()
    }

    if (!mainClassTestFile.exists) {
      let mainClassTestFileContents = "
        #{packageStatement}

        import #{mainClass}

        import static novex/nest/Nest

        testable class {
          test `can create`() {
            let value = #{mainClassFile.rootName}()

            expect(value).toNotBe(null)
          }
        }\n
        |".trimStart()

      FileWriter(mainClassTestFile)
        :write(mainClassTestFileContents)
        .close()
    }

    if (!testSuiteFile.exists) {
      let testSuiteFileContents = "
        #{packageStatement}

        import novex/nest/TestResult

        import flatlang/time/Timer
        import flatlang/io/FancyOutputStream

        [TestSuite [
          #{mainClassTestFile.rootName}
        ]]
        class {
          public static async main(String args[]) {
            let test = #{testSuiteFile.rootName}()

            Timer timer = Timer().start()

            let results = new TestResult[]

            test.runTests({
              results.add(_)
            })

            let fancy = FancyOutputStream(headerPattern: &quote;/\\\\&quote;)

            let unsuccessful = results.filter({ !_.success })

            if (unsuccessful.count > 0) {
              fancy.writeHeader(&quote;&hash;unsuccessful.count Failure&hash;{unsuccessful.count == 1 ? &quote;&quote; : &quote;s&quote;} out of &hash;results.count test&hash;{results.count == 1 ? &quote;&quote; : &quote;s&quote;}&quote;, pattern: &quote;:'( &quote;, symmetrical: true)

              unsuccessful.forEach({
                Console.log(&quote;&hash;_&quote;)
              })
            } else {
              fancy.writeHeader(&quote;All &hash;results.count Successful&quote;, pattern: &quote;:) &quote;, symmetrical: true)
            }

            timer.stop()

            Console.writeLine(&quote;Took &quote; + timer.duration + &quote;ms&quote;)

            if (unsuccessful.count > 0) {
                System.exit(1)
            }
          }
        }\n
        |".replace("&quote;", "\"").replace("&hash;", '#'.toString()).trimStart()

      FileWriter(testSuiteFile)
        :write(testSuiteFileContents)
        .close()
    }
  }

  async writeFlatJson(
    File flatJson,
    String: name,
    String: version,
    String: description,
    String: author,
    String: license,
    String: defaultTarget,
    String: mainClass
  ) {
    let mainClassProperty = mainClass ? "\"mainClass\": \"#{mainClass}\",\n    " : ""
    let testMainClassProperty = mainClass ? "\"mainClass\": \"#{mainClass}_TestSuite\",\n    " : ""

    let jsonContents = "
      {
        \"name\": \"#name\",
        \"version\": \"#version\",
        \"description\": \"#description\",
        \"author\": \"#author\",
        \"license\": \"#license\",
        \"defaultTarget\": \"#defaultTarget\",
        \"scripts\": {
          \"test\": \"node dist/test.js\"
        },
        \"main\": {
          #mainClassProperty\"source\": \"src\",
          \"dependencies\": {
          }
        },
        \"test\": {
          #testMainClassProperty\"source\": \"src\",
          \"dependencies\": {
            \"github:FlatLang/Nest\": \"master\"
          }
        }
      }\n
      |".trimStart()

    FileWriter(flatJson)
      :write(jsonContents)
      .close()
  }
}