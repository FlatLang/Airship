package "flatlang/airship/services"

import "flatlang/io/File"
import "flatlang/airship/Airship"
import "flatlang/airship/InvalidScriptException"
import "flatlang/airship/ExecutionFailureException"

class {
  public construct(private Airship airship) {}

  public async runScript(String script) {
    if (!airship.package.scripts.containsKey(script)) {
      throw new InvalidScriptException("Script command '#script' is not defined")
    }

    let workingDirectory = airship.flatJsonFile.getParent().location
    let cmd = airship.package.scripts[script]

    if (cmd?.class.isOfType(Array.class)) {
      let Object[] array = (Object[])cmd

      if (array.isEmpty) {
        return
      }

      for (obj in array) {
        if (obj.class.isOfType(Array.class)) {
          let String[] c = (Array)obj

          if (airship.debug) {
            Console.writeLine(c[0] + " " + c.skip(1).map({ "\"#{_}\"" }).join(" "))
          } else {
            let response = System.execute(c, workingDirectory)

            if (response.exitCode != 0) {
              throw new ExecutionFailureException("Script exited with exit code #response.exitCode")
            }
          }
        } else if (obj.class.isOfType(String.class)) {
          let String c = (String)obj

          if (airship.debug) {
            Console.writeLine(c)
          } else {
            let response = System.execute(c, workingDirectory)

            if (response.exitCode != 0) {
              throw new ExecutionFailureException("Script exited with exit code #response.exitCode")
            }
          }
        }
      }

      return
    }

    if (airship.debug) {
      Console.writeLine(cmd)
      return
    }

    let response = System.execute(cmd.toString(), workingDirectory)

    if (response.exitCode != 0) {
      throw new ExecutionFailureException("Script exited with exit code #response.exitCode")
    }
  }
}