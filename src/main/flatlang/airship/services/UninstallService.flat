package "flatlang/airship/services"

import "flatlang/io/File"
import "flatlang/airship/Airship"
import "flatlang/airship/InvalidCommandException"

class {
  public construct(private Airship airship) {}

  public async uninstall() {
    if (airship.uninstallCommand.values.isEmpty) {
      if (airship.linkArg.enabled) {
        if (let gitUrl = await airship.getGitOriginUrl()) {
          airship.linkArg.value = "."
          await uninstallGitPackage(gitUrl)
          return
        } else {
          throw new InvalidCommandException("#{System.workingDirectory} is not a git repository")
        }
      }

      throw new InvalidCommandException("Invalid uninstall command without a value")
    }

    for (package in airship.uninstallCommand.values) {
      await uninstall(package)
    }
  }

  public async uninstall(String package) {
    if (package.endsWith(".git")) {
      await uninstallGitPackage(package)
    } else {
      throw new InvalidCommandException("Cannot uninstall package '#package'")
    }
  }

  public async uninstallGitPackage(String url) {
    let packageName = url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'))
    let flatPackageDir = new File("#{airship.flatHome}/packages/#{packageName}")

    if (!flatPackageDir.isDirectory && !flatPackageDir.isSymbolicLink) {
      throw new InvalidCommandException("Package '#packageName' is not installed")
    }

    await flatPackageDir.delete(recursive: true)
  }
}