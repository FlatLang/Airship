package "flatlang/airship/services"

import "flat/log/Logger"

import "flatlang/airship/Airship"
import "flatlang/airship/PackageSource"
import "flatlang/datastruct/HashSet"
import "flatlang/datastruct/Pair"
import "flatlang/io/File"
import "flatlang/git/Git"
import "flatlang/airship/InvalidFlatJsonException"
import "flatlang/airship/ExecutionFailureException"

class {
  let static Logger log = Logger(DependencyService.class)

  public construct(
    private Airship airship
  ) {}

  getPackageNameFromGitUrl(String url) => url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'))

  public getDependencyPackageLocation(String url) -> File {
    let packageName = getPackageNameFromGitUrl(url)
    return File("#{airship.flatHome}/packages/#{packageName}")
  }

  public getDependencyLocation(Pair<String, String> dependency) -> String {
    if (dependency.value == "local") {
      return dependency.key
    } else if (dependency.key.toLowerCase().startsWith("github:")) {
      let fullRepoName = dependency.key.substring("github:".count).trim()
      let repoName = fullRepoName.substring(fullRepoName.lastIndexOf('/') + 1)
      return "#{airship.flatHome}/packages/#{repoName}"
    } else {
      throw InvalidFlatJsonException("Invalid dependency #dependency")
    }
  }

  public getDependencyGitUrl(Pair<String, String> dependency) -> String {
    if (dependency.key.toLowerCase().startsWith("github:")) {
      let repoName = dependency.key.substring("github:".count).trim()
      return getGitHubUrlFromRepoName(repoName)
    } else {
      throw InvalidFlatJsonException("Invalid dependency #dependency")
    }
  }

  public getGitHubUrlFromRepoName(String repoName) => "https://GitHub.com/#{repoName}.git"

  public class DependenciesResponse {
    construct(
      visible Array<Pair<String, String>> dependencies = Array(),
      visible Array<Pair<String, String>> dependenciesDownloaded = Array()
    ) {}
  }

  public async getDependenciesForSource(
    String package,
    String installationTarget,
    PackageSource source,
    Bool: download = true
  ) -> DependenciesResponse {
    return getDependenciesForSource(
      package,
      installationTarget,
      source,
      download,
      DependenciesResponse(),
      HashSet()
    )
  }

  async getDependenciesForSource(
    String package,
    String installationTarget,
    PackageSource source,
    Bool download = true,
    DependenciesResponse response,
    HashSet<String> dependenciesAdded
  ) -> DependenciesResponse {
    if (dependenciesAdded.contains(package)) {
      return response
    }

    dependenciesAdded.add(package)

    if (!source.dependencies) {
      return response
    }

    for (dependency in source.dependencies) {
      if (response.dependencies.none({ getDependencyLocation(_) == getDependencyLocation(dependency) })) {
        response.dependencies.add(dependency)
      }

      let dependencyPackageFile = File(getDependencyLocation(dependency))

      if (!dependencyPackageFile.exists) {
        if (download) {
          downloadDependency(
            getDependencyGitUrl(dependency),
            dependency.value
          )
          response.dependenciesDownloaded.add(dependency)
        }

        if (!dependencyPackageFile.exists) {
          continue
        }
      }

      let args = [
        "-f", dependencyPackageFile.normalizedLocation
      ]

      airship.propagateArgs(args)

      let childship = Airship(args, airship)

      let packageSource = match (installationTarget) {
        "main" => childship.mainSource
        "test" => childship.testSource ?: childship.mainSource
      }

      if (packageSource) {
        getDependenciesForSource(
          dependencyPackageFile.name,
          installationTarget,
          packageSource,
          download,
          response,
          dependenciesAdded
        )
      }
    }

    return response
  }

  public isDependencyInstalled(String url, String branch) =>
    getDependencyPackageLocation(url).getChild(".git").isDirectory

  public async downloadDependency(String url, String branch) {
    let flatPackageDir = getDependencyPackageLocation(url):mkdirs()

    if (flatPackageDir.getChild(".git").isDirectory) {
      return
    }

    log.info("Cloning dependency #url (#branch) into '#{flatPackageDir.normalizedLocation}'...")

    let response = Git.clone(
      url,
      depth: 1,
      branch: branch,
      outputDirectory: flatPackageDir.normalizedLocation,
      silent: true
    )

    if (response.exitCode != 0) {
      throw ExecutionFailureException("Failed to install git repo")
    }
  }
}