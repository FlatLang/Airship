package flatlang/airship/services

import flat/log/Logger

import flatlang/io/File
import flatlang/git/Git
import flatlang/airship/Airship
import flatlang/airship/ExecutionFailureException
import flatlang/airship/Dependency
import flatlang/airship/GitHubDependency
import flatlang/airship/LocalDependency

class {
  let static Logger log = Logger(UpdateService.class)

  public construct(
    private Airship airship,
    private DependencyService dependencyService
  ) {}

  getPackageNameFromGitUrl(String url) => url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'))

  public async update() {
    if (airship.updateCommand.values.isEmpty) {
      updateLocalPackage("main")
    } else {
      for (package in airship.updateCommand.values) {
        match (package) {
          "main" => fallthrough
          "test" => updateLocalPackage(package)
          default => updatePackage(package)
        }
      }
    }
  }

  public async updateLocalPackage(String package) {
    log.info("Updating dependencies for #{package}...")

    let source = airship.getSourceForPackage(package)
    let response = dependencyService.getDependenciesForSource(package, package, source)

    for (dependency in response.dependencies) {
      updatePackage(dependency)
    }
  }

  public async updatePackage(
    String package,
    Bool: build = true
  ) {
    updatePackage(Dependency(package), build)
  }

  public async updatePackage(
    Dependency dependency,
    Bool: build = true
  ) {
    if (dependency.class.isOfType(GitHubDependency.class)) {
      updateGitPackage((GitHubDependency)dependency, build)
    } else {
      throw Exception("Cannot update package: #dependency")
    }
  }

  public async updateGitPackage(
    GitHubDependency dependency,
    Bool: build = true
  ) {
    if (!airship.quietArg.enabled) {
      log.info("Updating dependency #{dependency.getGitUrl()} (#{dependency.branch})... ", newLine: false)
    }

    let packageLocation = dependencyService.getDependencyPackageLocation(dependency)

    if (!packageLocation.isDirectory && !packageLocation.isSymbolicLink) {
      throw ExecutionFailureException("Dependency #{dependency.getGitUrl()} (#{dependency.branch}) is not installed")
    }

    let git = Git(packageLocation.location)

    git.checkout(dependency.branch, silent: true)

    let pullResponse = git.pull(silent: true)

    if (pullResponse.upToDate) {
      log.info("already up to date")
    } else {
      let args = [
        "-f", packageLocation.normalizedLocation
      ]

      airship.propagateArgs(args)

      let childship = Airship(args, airship)

      if (build && childship.package?.scripts.containsKey("build")) {
        log.info("updated. Building...")

        if (childship.package.scripts.containsKey("clean")) {
          childship.runScriptService.runScript("clean")
        }

        childship.runScriptService.runScript("build")
      } else {
        log.info("updated")
      }
    }
  }
}