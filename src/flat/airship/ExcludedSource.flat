package flat/airship

import flat/datastruct/HashMap

class {
  public construct(Object value) {
    if (value.class.isOfType(String.class)) {
      this((String)value)
    } else if (value.class.isOfType(HashMap.class)) {
      this((HashMap)value)
    } else {
      throw Exception("Invalid ExcludedSource value: #value")
    }
  }

  public construct(HashMap<String, Object> map) {
    throw Exception("Invalid ExcludedSource value: #map")
  }

  public construct(
    visible String location
  ) {}

  public equals(Object other) =>
    other &&
    other.class.isOfType(ExcludedSource.class) &&
    equals((ExcludedSource)other)

  public equals(ExcludedSource other) =>
    other &&
    other.location == location

  public override toString() => "|
    {
      \"location\": \"#{location}\"
    }
    |"
}