package flat/airship/services

import flat/log/Logger
import flat/npm/Npm
import flat/airship/Airship
import flat/airship/PackageSource
import flat/datastruct/HashSet
import flat/io/File
import flat/git/Git

import flat/airship/InvalidFlatJsonException
import flat/airship/ExecutionFailureException
import flat/airship/InvalidCommandException
import flat/airship/Dependency
import flat/airship/GitHubDependency
import flat/airship/LocalDependency
import flat/airship/NpmDependency

class {
  static Logger log = Logger(DependencyService.class)

  public construct(
    private Airship airship
  ) {}

  getPackageNameFromGitUrl(String url) => url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'))

  public getDependencySourceLocations(Dependency dependency, String installationTarget = "main") -> String[] {
    if (!dependency.isFlatPackage()) {
      return Array<String>()
    }

    let baseLocation = dependency.getLocation()

    return dependency.getSourcesForInstallation(installationTarget)
      .map({ _?.source ?: "src" })
      .map({ "#{baseLocation}/#{_}" })
  }

  public getDependencySourceLocation(Dependency dependency, String installationTarget = "main") -> String {
    if (!dependency.isFlatPackage()) {
      return null
    }

    let baseLocation = dependency.getLocation()
    let source = dependency.airship.getSourceForPackage(installationTarget, dependency.airship.package.defaultSource)

    if (source?.source) {
      return "#{baseLocation}/#{source.source}"
    } else {
      return null
    }
  }

  public getDependencySourceGlobLocation(Dependency dependency, String installationTarget = "main") -> String {
    if (let location = getDependencySourceLocation(dependency, installationTarget)) {
      let glob = location.contains("*")
      log.trace("Checking location for glob: #{location}: #{glob}")
      if (glob) {
        return location
      }
    }

    return null
  }

  public getDependencyExclusions(Dependency dependency, String installationTarget = "main") -> String[] {
    if (!dependency.isFlatPackage()) {
      return Array<String>()
    }

    let baseLocation = dependency.getLocation()
    let source = dependency.airship.getSourceForPackage(installationTarget, dependency.airship.package.defaultSource)

    if (!source) {
      return Array<String>()
    }

    return source.excludedSources.map({ "#{baseLocation}/#{_.location}" })
  }

  class DependenciesResponse {
    construct(
      visible Array<Dependency> dependencies = Array(),
      visible Array<Dependency> dependenciesDownloaded = Array()
    ) {}
  }

  public async getDependenciesForSource(
    String package,
    String installationTarget,
    PackageSource source,
    Bool: download = true,
    Bool: recursive = true
  ) -> DependenciesResponse {
    return getDependenciesForSource(
      package,
      installationTarget,
      source,
      download,
      recursive,
      DependenciesResponse(),
      HashSet()
    )
  }

  async getDependenciesForSource(
    String package,
    String installationTarget,
    PackageSource source,
    Bool download = true,
    Bool recursive = true,
    DependenciesResponse response,
    HashSet<String> dependenciesAdded
  ) -> DependenciesResponse {
    if (dependenciesAdded.contains(package)) {
      return response
    }

    dependenciesAdded.add(package)

    if (!source?.dependencies) {
      return response
    }

    source.dependencies
      :forEach((dependency) => {
        if (response.dependencies.none({ _.getLocation() == dependency.getLocation() })) {
          response.dependencies.add(dependency)
        }
      })
      .filter({ !_.class.isOfType(NpmDependency.class) })
      .filter((dependency) => {
        let dependencyPackageFile = File(dependency.getLocation())

        if (dependencyPackageFile.exists && !dependency.isFlatPackage()) {
          log.debug("Dependency \"#{dependency}\" is not a valid Flat package. Skipping")
          return false
        } else {
          return true
        }
      })
      :forEachParallel((dependency) => {
        let dependencyPackageFile = File(dependency.getLocation())

        if (download && !dependencyPackageFile.exists) {
          installDependency(dependency)
          response.dependenciesDownloaded.add(dependency)
        }
      })
      :forEachAsync((dependency) => {
        let dependencyPackageFile = File(dependency.getLocation())

        let args = [
          "-f", dependencyPackageFile.normalizedLocation
        ]

        airship.propagateArgs(args)

        let childship = Airship(args, airship)

        let packageSource = childship.getSourceForPackage(installationTarget, childship.package.defaultSource)
        log.trace("Found source for #{childship.packageLocation.normalizedLocation} with source #packageSource")

        if (packageSource && recursive) {
          getDependenciesForSource(
            dependencyPackageFile.name,
            installationTarget,
            packageSource,
            download,
            recursive,
            response,
            dependenciesAdded
          )
        }
      })

    return response
  }

  public isDependencyInstalled(Dependency dependency) -> Bool {
    return if (dependency.class.isOfType(GitHubDependency.class)) {
      isGitHubDependencyInstalled((GitHubDependency)dependency)
    } else if (dependency.class.isOfType(NpmDependency.class)) {
      isNpmDependencyInstalled((NpmDependency)dependency)
    } else if (dependency.class.isOfType(LocalDependency.class)) {
      isLocalDependencyInstalled((LocalDependency)dependency)
    }
  }

  isGitHubDependencyInstalled(GitHubDependency dependency) -> Bool {
    let exists = File(dependency.getLocation()).getChild(".git").isDirectory
    log.trace("GitHub dependency #{dependency} is installed: #exists")
    return exists
  }

  isNpmDependencyInstalled(NpmDependency dependency) -> Bool {
    let exists = File(dependency.getLocation()).isDirectory
    log.trace("NPM dependency #{dependency} is installed: #exists")
    return exists
  }

  isLocalDependencyInstalled(LocalDependency dependency) -> Bool {
    let exists = File(dependency.getLocation()).isDirectory
    log.trace("Local dependency #{dependency} is installed: #exists")
    return exists
  }

  public async installDependency(Dependency dependency) {
    if (dependency.class.isOfType(GitHubDependency.class)) {
      cloneGitHubDependency((GitHubDependency)dependency)
    } else if (dependency.class.isOfType(NpmDependency.class)) {
      installNpmDependency((NpmDependency)dependency)
    } else if (dependency.class.isOfType(LocalDependency.class)) {
      log.trace("Nothing to do for local dependency installation")
    } else {
      throw Exception("Cannot install dependency #dependency")
    }
  }

  public async installNpmDependency(NpmDependency dependency) {
    let cmd = Array<String>()
      :addAll(["npm", "install"])

    let packageToInstall = if (dependency.version != "latest") {
      "#{dependency.packageName}@#{dependency.version}"
    } else {
      dependency.packageName
    }

    let response = Npm.install(
      packageToInstall,
      workingDirectory: airship.packageLocation.location,
      silent: airship.quietArg.enabled || log.loggingLevel < Logger.DEBUG
    )

    if (response.exitCode != 0) {
      throw ExecutionFailureException("|
        NPM package installation failed for package \"#{packageToInstall}\"
          Error: #{response.stderr.join("\n")}
        |")
    }
  }

  public async cloneGitHubDependency(GitHubDependency dependency) {
    let url = dependency.getGitUrl()
    let branch = dependency.branch
    let flatPackageDir = File(dependency.getLocation()):mkdirs()

    if (flatPackageDir.getChild(".git").isDirectory) {
      return
    }

    log.info("Cloning dependency #url (#branch) into '#{flatPackageDir.normalizedLocation}'...")

    let response = Git.clone(
      url,
      depth: 1,
      branch,
      outputDirectory: flatPackageDir.normalizedLocation,
      silent: airship.quietArg.enabled || log.loggingLevel < Logger.DEBUG
    )

    if (response.exitCode != 0) {
      throw ExecutionFailureException("|
        Failed to install git repo:
        #{response.stderr.join("\n")}
        |")
    }
  }

  public async uninstallDependency(Dependency dependency) {
    if (dependency.class.isOfType(GitHubDependency.class)) {
      uninstallGitHubDependency((GitHubDependency)dependency)
    } else if (dependency.class.isOfType(NpmDependency.class)) {
      uninstallNpmDependency((NpmDependency)dependency)
    } else if (dependency.class.isOfType(LocalDependency.class)) {
      log.trace("Nothing to do for local dependency unistallation")
    } else {
      throw Exception("Cannot uninstall dependency #dependency")
    }
  }

  async uninstallGitHubDependency(GitHubDependency dependency) {
    uninstallPackageDirectory(dependency.getFlatPackageDirectory())
  }

  async uninstallNpmDependency(NpmDependency dependency) {
    let response = Npm.uninstall(
      dependency.packageName,
      workingDirectory: airship.packageLocation.location,
      silent: airship.quietArg.enabled || log.loggingLevel < Logger.DEBUG
    )

    if (response.exitCode != 0) {
      throw ExecutionFailureException("|
        NPM package uninstallation failed for package \"#{dependency.packageName}\"
          Error: #{response.stderr.join("\n")}
        |")
    }
  }

  async uninstallPackageDirectory(File flatPackageDir) {
    if (!flatPackageDir.isDirectory && !flatPackageDir.isSymbolicLink) {
      throw InvalidCommandException("Package is not installed at \"#flatPackageDir.nativeLocation\"")
    }

    flatPackageDir.delete(recursive: true)
  }
}