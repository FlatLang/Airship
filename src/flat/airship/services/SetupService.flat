package flat/airship/services

import flat/log/Logger
import flat/datastruct/HashSet
import flat/datastruct/Pair
import flat/io/File
import flat/io/FileReader
import flat/io/FileWriter
import flat/git/Git
import flat/regedit/RegEdit
import flat/path/Path

import flat/airship/Airship
import flat/airship/PackageSource
import flat/airship/InvalidFlatJsonException
import flat/airship/ExecutionFailureException
import flat/airship/GitHubDependency

import static flat/readline/ReadLine
import static flat/colorizer/Colorizer

class {
  let static Logger log = Logger(SetupService.class)
  let static Logger setupLog = Logger(SetupService.class, showPrefix: false, lineLength: 65)

  public construct(
    private Airship airship,
    private DependencyService dependencyService,
    private UpdateService updateService
  ) {}

  public async setup() {
    if (airship.uninstallArg.enabled) {
      uninstall()
    } else {
      install()
    }
  }

  async install() {
    let airshipDependency = GitHubDependency("github:FlatLang/Airship", "master")

    if (dependencyService.isDependencyInstalled(airshipDependency)) {
      setupLog.info("Airship already installed. Checking for updates")
      updateService.updateGitPackage(airshipDependency, build: true)
    } else {
      setupLog.info("Installing Airship")
      airship.installService.installDependency(airshipDependency)
    }

    let flatHome = File(Airship.flatHome)
    let pathValue = File(flatHome, "bin").nativeLocation

    setupLog.info("|
      The Flat home directory is located at:

        #{underscore(flatHome.nativeLocation)}

      This can be modified with the FLAT_HOME environment variable.

      The 'airship' command and others will be added to Flat's bin directory, located at:

        #{underscore(pathValue)}

      |")

    if (System.OS_INT == System.WINDOWS) {
      setupLog.info("|
        This path will then be added to your PATH environment variable by modifying the HKEY_CURRENT_USER/Environment/PATH registry key

        |")

      RegEdit.setExternalVBSLocation("#{airshipDependency.getLocation()}/node_modules/regedit/vbs")

      Path.prependToUserPath(pathValue)

      setupLog.info("|
        Flat is installed now!

        To get started you may need to restart your current shell. This would reload its PATH environment variable to include Airship's bin directory (#{underscore(pathValue)}).

        |")

      question("Press the Enter key to continue.")
    } else {
      let files = Path.getUserShellRunCommandsFiles()

      if (files.count == 0) {
        log.error("|
          This user does not seem to have any valid initialization script files (e.g. ~/.bashrc, ~/.zshrc, ...)

          |")
        log.error("|
          To finish installation, you will need to manually add \"#{underscore(pathValue)}\" to your path, howewer you see fit.

          |")
      } else {
        setupLog.info("|
          This path will then be added to your PATH environment variable by modifying the profile files located at:

            #{files.map(x => underscore(x.nativeLocation)).join("\n  ")}

          |")

        let envFile = File(flatHome, "env")

        if (!envFile.exists) {
          log.debug("Creating env file at \"#{envFile.nativeLocation}\"")

          FileWriter(envFile)
            :write("|
              \#!/bin/sh
              \# Flat shell setup
              \# affix colons on either side of $PATH to simplify matching
              case \":${PATH}:\" in
                  *:\"#{pathValue}\":*)
                      ;;
                  *)
                      \# Prepending path in case a system-installed Flat needs to be overridden
                      export PATH=\"#{pathValue}:$PATH\"
                      ;;
              esac
              |")
            :close()
        } else {
          log.debug("Env file already exists at \"#{envFile.nativeLocation}\". Skipping")
        }

        for (file in files) {
          let contents = FileReader(file).readAllContents()

          if (contents.contains(envFile.nativeLocation)) {
            log.debug("Environment file is already loaded to the path in file \"#{file.nativeLocation}\". Skipping")
            continue
          }

          log.debug("Appending code to load env file \"#{envFile.nativeLocation}\" in file \"#{file.nativeLocation}\"")

          FileWriter(file)
            :append("|

              #{getFlatUnixConfig(envFile)}
              |")
            :close()
        }

        setupLog.info("|
          Flat is installed now!

          To get started you may need to restart your current shell. This would reload its PATH environment variable to include Airship's bin directory (#{underscore(pathValue)}).

          To configure your current shell, run:
          source \"#{envFile.nativeLocation}\"
          |")
      }
    }
  }

  async uninstall() {
    let airshipDependency = GitHubDependency("github:FlatLang/Airship", "master")

    let flatHome = File(Airship.flatHome)
    let pathValue = File(flatHome, "bin").nativeLocation

    if (System.OS_INT == System.WINDOWS) {
      setupLog.info("|
        Removing Flat from PATH environment variable by modifying the HKEY_CURRENT_USER/Environment/PATH registry key

        |")

      RegEdit.setExternalVBSLocation("#{airshipDependency.getLocation()}/node_modules/regedit/vbs")

      Path.removeFromUserPath(pathValue)
    } else {
      let files = Path.getUserShellRunCommandsFiles()

      if (files.isNotEmpty) {
        setupLog.info("|
          Removing Flat configuration from the files located at:

            #{files.map(x => underscore(x.nativeLocation)).join("\n  ")}

          |")

        let envFile = File(flatHome, "env")

        for (file in files) {
          let contents = FileReader(file).readAllContents()

          if (!contents.contains(envFile.nativeLocation)) {
            log.debug("Environment file doesn't contain any Flat configuration. Skipping")
            continue
          }

          log.debug("Removing code to load env file \"#{envFile.nativeLocation}\" in file \"#{file.nativeLocation}\"")

          let config = getFlatUnixConfig(envFile)
          let index = contents.indexOf(config)

          if (index == -1) {
            log.warn("File \"#{file.nativeLocation}\" has modified Flat configuration. Skipping")
            continue
          }

          let newContents = contents.substring(0, index) + contents.substring(index + config.count)

          FileWriter(file)
            :write(newContents)
            :close()
        }
      }
    }

    log.debug("Deleting Flat home directory \"#{flatHome.nativeLocation}\"")

    flatHome.delete(
      recursive: true,
      force: true
    )

    let reinstall = boolQuestion("|
      Flat is uninstalled now. :(

      Would you like to reinstall Flat? (Y/n): ")

    if (reinstall) {
      install()
    }
  }

  getFlatUnixConfig(File envFile) -> String {
    return "|
      \# Flat
      . \"#{envFile.nativeLocation}\"
      |"
  }
}