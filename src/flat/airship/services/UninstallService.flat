package flat/airship/services

import flat/airship
import flat/log/Logger
import flat/io/File

class {
  static Logger log = Logger(UninstallService.class)

  public construct(
    private Airship airship,
    private DependencyService dependencyService
  ) {}

  public async uninstall() {
    if (airship.cliArgs.uninstallCommand["installationTarget"].values.isEmpty) {
      if (airship.cliArgs.uninstallLinkArg.enabled) {
        if (let gitUrl = airship.getGitOriginUrl()) {
          airship.cliArgs.uninstallLinkArg.value = "."
          uninstallGitPackage(gitUrl)
          return
        } else {
          throw InvalidCommandException("#{System.workingDirectory} is not a git repository")
        }
      }

      throw InvalidCommandException("Invalid uninstall command without a value")
    }

    for (package in airship.cliArgs.uninstallCommand["installationTarget"].values) {
      uninstall(package)
    }
  }

  public async uninstall(String package) {
    uninstallDependency(Dependency.fromPackage(package))
  }

  public async uninstallDependency(Dependency dependency) {
    if (dependencyService.isDependencyInstalled(dependency)) {
      log.debug("Uninstalling dependency #{dependency}")
      dependencyService.uninstallDependency(dependency)
    } else {
      log.debug("Dependency #{dependency} not installed")
    }
  }

  public async uninstallGitPackage(String url) {
    let packageName = url.substring(url.lastIndexOf('/') + 1, url.lastIndexOf('.'))
    let flatPackageDir = File("#{Airship.flatHome}/packages/#{packageName}")

    if (!flatPackageDir.isDirectory && !flatPackageDir.isSymbolicLink) {
      throw InvalidCommandException("Package '#packageName' is not installed")
    }

    flatPackageDir.delete(recursive: true)
  }
}