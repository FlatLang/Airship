package flat/airship

import flat/datastruct/HashMap

class {
  visible String name
  visible String version
  visible String description
  visible String author
  visible String license
  visible String defaultTarget
  visible HashMap<String, Object> scripts
  visible HashMap<String, PackageSource> sources

  visible PackageSource mainSource <=> sources["main"]
  visible PackageSource testSource <=> sources["test"]
  visible PackageSource defaultSource => mainSource ?: testSource

  public construct(HashMap<String, Object> map) {
    name = (String)map["name"]
    version = (String)map["version"]
    description = (String)map["description"]
    author = (String)map["author"]
    license = (String)map["license"]
    defaultTarget = (String)map["defaultTarget"]
    scripts = (HashMap)map["scripts"]

    let HashMap<String, HashMap> sourcesMap = (HashMap)map["sources"]

    if (!sourcesMap || !sourcesMap.class.isOfType(HashMap.class)) {
      sources = HashMap()
    } else {
      sources = sourcesMap.mapValues(pair => PackageSource(this, pair.key, (HashMap)pair.value))
    }
  }

  override public toString() => "|
    {
      name: \"#name\",
      version: \"#version\",
      description: \"#description\",
      author: \"#author\",
      license: \"#license\",
      defaultTarget: \"#defaultTarget\",
      sources: \"#sources\",
      scripts: \"#scripts\"
    }
    |"
}