package flat/airship

import flat/io/File
import flat/datastruct/HashMap

import flat/airship/PackageSource

abstract data class {
  visible let lazy Airship airship => Airship(getLocation())

  public static fromPackage(String package) -> Dependency {
    return if (package.toLowerCase().startsWith("github:")) {
      let gitHubUrl = package.contains("@") ?
        package.substring(end: package.indexOf("@")) :
        package

      let branch = package.contains("@") ?
        package.substring(package.indexOf("@") + 1) :
        "master"

      GitHubDependency(gitHubUrl, branch)
    } else if (package.toLowerCase().startsWith("npm:")) {
      let packageName = package.contains("@") ?
        package.substring("npm:".count, package.indexOf("@")) :
        package.substring("npm:".count)

      let version = package.contains("@") ?
        package.substring(package.indexOf("@") + 1) :
        "latest"

      NpmDependency(packageName, version)
    } else if (package.toLowerCase().startsWith("local:")) {
      LocalDependency(package.substring("local:".count))
    }

    throw Exception("Invalid dependency \"#package\"")
  }

  public static fromKeyValue(String key, String value) -> Dependency {
    return if (key.toLowerCase().startsWith("github:")) {
      GitHubDependency(
        gitHubUrl: key,
        branch: value
      )
    } else if (key.toLowerCase().startsWith("npm:")) {
      NpmDependency(
        packageName: key.substring("npm:".count),
        version: value
      )
    } else if (value == "local") {
      LocalDependency(key)
    }

    throw Exception("Invalid dependency {\"#key\": \"#value\"}")
  }

  public abstract getLocation() -> String
  public abstract toJsonKey() -> String
  public abstract toJsonValue() -> String

  public toJsonEntry() => "#{toJsonKey()}: #{toJsonValue()}"

  public isFlatPackage() => File(File(getLocation()), "flat.json").isFile

  public getFlatPackageDirectory() => isFlatPackage() ? File(getLocation()) : null

  public getSourcesForInstallation(
    String installationTarget
  ) -> PackageSource[] {
    return Array<PackageSource>()
      :add(airship.package.mainSource)
      :add(airship.getSourceForPackage(installationTarget))
      .unique()
  }

  public abstract clone() -> Dependency
}