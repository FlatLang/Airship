package flatlang/airship

import flatlang/datastruct/HashMap

import flatlang/airship/PackageSource

abstract class {
  let Airship airship => Airship(getLocation())

  public construct(String package) {
    return if (package.toLowerCase().startsWith("github:")) {
      GitHubDependency(
        gitHubUrl: package,
        branch: "master"
      )
    } else {
      LocalDependency(package)
    }

    throw Exception("Invalid dependency \"#package\"")
  }

  public construct(String key, String value) {
    return if (key.toLowerCase().startsWith("github:")) {
      GitHubDependency(
        gitHubUrl: key,
        branch: value
      )
    } else if (value == "local") {
      LocalDependency(key)
    }

    throw Exception("Invalid dependency {\"#key\": \"#value\"}")
  }

  public abstract getLocation() -> String

  public getSourcesForInstallation(
    String installationTarget,
    PackageSource defaultSource = null
  ) -> PackageSource[] {
    var Array<PackageSource> defaultSources = null

    if (defaultSource) {
      defaultSources = Array<PackageSource>():add(defaultSource)
    }

    return getSourcesForInstallation(
      installationTarget,
      defaultSources
    )
  }

  public getSourcesForInstallation(
    String installationTarget,
    PackageSource[] defaultSources = null
  ) -> PackageSource[] {
    return match (installationTarget) {
      "main" => Array<PackageSource>():add(airship.mainSource)
      "test" => Array<PackageSource>():add(airship.mainSource):add(airship.testSource)
      default => {
        if (defaultSources) {
          return defaultSources
        }

        throw ExecutionFailureException("Invalid installation target '#installationTarget'")
      }
    }
  }
}