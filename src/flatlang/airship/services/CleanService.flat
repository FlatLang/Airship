package flatlang/airship/services

import flat/log/Logger

import flatlang/io/File
import flatlang/airship/Airship
import flatlang/airship/PackageSource

class {
  let static Logger log = Logger(CleanService.class)

  public construct(private Airship airship) {}

  public async clean() {
    let directories = airship.package.sources
      .map({ _.value.outDirectory })
      .filterNull()
      .map({ "#{airship.packageLocation.normalizedLocation}/#_" })
      .unique()
      .map({ File(_) })

    for (directory in directories) {
      clean(directory)
    }
  }

  async clean(File directory) {
    try {
      directory.delete(recursive: true)
    } catch (Exception e) {
      throw Exception("Failed to clean directory '#{directory.normalizedLocation}'")
    }
  }
}