package flatlang/airship

import flatlang/airship/Airship
import flatlang/fucli/FuCli.InvalidCliArgumentException
import flatlang/airship/InvalidOutDirException
import flatlang/io/File

import flatlang/extensions/SyntaxStringFunctions

import static novex/nest/Nest

testable class {
  test `can create`() {
    let airship = Airship(Array<String>())

    expect(airship).toNotBe(null)
  }

  test async `can debug basic install`() {
    let airship = Airship(["install", "--debug", "-q", "-t", "js"])

    expect(airship.debug).toBe(true, "Expected debug flag to be true")

    let allOutput = Console.out.captureOutput(async { airship.installService.install() })

    expect(allOutput.count).toBe(1, "Extaneous output: #allOutput")

    let output = allOutput[0]
    let cmdOutput = output.splitOnTopLevel(' ')
    let flatHome = airship.flatHome

    let package = "main"
    let source = airship.getSourceForPackage(package)
    let response = airship.dependencyService.getDependenciesForSource(package, package, source)

    let cmd = [
      "java", "-jar", "#{flatHome}/packages/Flat/target/flatc.jar",
      "#{airship.packageLocation.normalizedLocation}/src/main",
      "-install-dir", "#{flatHome}/packages",
      "-o", "#{airship.packageLocation.normalizedLocation}/dist/airship.js",
      "-target", "js"
    ]

    response.dependencies.forEach({
      cmd.addAll([
        "-l", airship.dependencyService.getDependencyLocation(_)
      ])
    })

    cmd.addAll([
      "-main", "flatlang/airship/Airship"
    ])

    let expected = cmd.map((arg, i) => {
      if (i > 0) {
        return '"' + arg + '"'
      } else {
        return arg
      }
    })

    expect(cmdOutput).toBe(expected)
  }

  test `fails on invalid -f arg (only arg given, with no value)`() {
    expect({ Airship(["-f"]) }).toThrow(InvalidCliArgumentException.class)
  }

  test `fails on invalid -f arg (last arg given, with no value)`() {
    expect({ Airship(["--debug", "-f"]) }).toThrow(InvalidCliArgumentException.class)
  }

  test `fails on absolute backslash outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-absolute-backslash-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be absolute")
  }

  test `fails on absolute double forward-slash outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-absolute-double-forward-slash-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be absolute")
  }

  test `fails on backslash start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-backslash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with \\")
  }

  test `fails on dot backslash start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-dot-backslash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on dot forward slash start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-dot-forward-slash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on double dot start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-double-dot-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on empty outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-empty-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be empty")
  }

  test `fails on forward slash start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-forward-slash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with /")
  }

  test `fails on single dot start outDirectory path`() {
    expect({ Airship(["-f", "res/test/flat-single-dot-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test async `can set target compile language`() {
    var airship = Airship(["--target", "js"])

    expect(airship.target).toBe("js")

    airship = Airship(["-t", "c"])

    expect(airship.target).toBe("c")
  }

  test async `can override flat.json location`() {
    let airship = Airship(["--file", "res/test/valid-flat.json"])

    expect(airship.flatJsonLocation).toBe("res/test/valid-flat.json")
  }
}