package "flatlang/airship"

import "flatlang/airship/Airship"
import "flatlang/airship/InvalidFlatJsonException"
import "flatlang/airship/InvalidOutDirException"

import "flatlang/extensions/SyntaxStringFunctions"

import static "novex/nest/Nest"

testable class {
  test `can create`() {
    let airship = new Airship(new Array<String>())

    expect(airship).toNotBe(null)
  }

  test async `can debug basic install`() {
    let airship = new Airship(["install", "--debug"])

    expect(airship.debug).toBe(true, "Expected debug flag to be true")

    let allOutput = await Console.out.captureOutput(async { await airship.install(airship.mainSource) })

    expect(allOutput.count).toBe(1)

    let output = allOutput[0]
    let cmdOutput = output.splitOnTopLevel(' ')
    let flatHome = System.getEnv("FLAT_HOME")

    let expected = [
      "java",
      "\"-jar\"",
      "\"#{flatHome}/Flat/target/flatc.jar\"",
      "\"src/main\"",
      "\"-l\"",
      "\"../Json\"",
      "\"-l\"",
      "\"../Compiler-String-Extensions\"",
      "\"-install-dir\"",
      "\"#{flatHome}\"",
      "\"-main\"",
      "\"flatlang/airship/Airship\"",
      "\"-o\"",
      "\"dist/airship.js\"",
      "\"-target\"",
      "\"js\""
    ]

    expect(cmdOutput).toBe(expected)
  }

  test `fails on invalid -f arg (only arg given, with no value)`() {
    expect({ new Airship(["-f"]) }).toThrow(InvalidFlatJsonException.class)
  }

  test `fails on invalid -f arg (last arg given, with no value)`() {
    expect({ new Airship(["--debug", "-f"]) }).toThrow(InvalidFlatJsonException.class)
  }

  test `fails on absolute backslash outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-absolute-backslash-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be absolute")
  }

  test `fails on absolute double forward-slash outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-absolute-double-forward-slash-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be absolute")
  }

  test `fails on backslash start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-backslash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with \\")
  }

  test `fails on dot backslash start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-dot-backslash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on dot forward slash start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-dot-forward-slash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on double dot start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-double-dot-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test `fails on empty outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-empty-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot be empty")
  }

  test `fails on forward slash start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-forward-slash-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with /")
  }

  test `fails on single dot start outDirectory path`() {
    expect({ new Airship(["-f", "res/test/flat-single-dot-start-outDirectory-path.json"]) })
      .toThrowWithMessage(InvalidOutDirException.class, "outDirectory cannot start with .")
  }

  test async `can override flat.json location`() {
    let airship = new Airship(["--file", "res/test/valid-flat.json"])

    expect(airship.flatJsonLocation).toBe("res/test/valid-flat.json")
  }
}